{"version":3,"sources":["busDisplayTable.js","bus.js","busDisplay.js","index.js"],"names":["convertBuses","busProps","buses","i","length","busProp","bus","no","routeShortName","route","routeLongName","stop","stopName","time","push","BusDisplayTable","props","useState","rows","setRows","setInitialRows","loading","setLoading","classes","makeStyles","theme","table","minWidth","display","marginTop","spacing","colorPrimary","useEffect","busRowSorter","a","b","compareHours","parseInt","split","compareMinutes","getRows","useCallback","busMap","sort","map","TableRow","TableCell","align","console","log","getLoadingCircle","CircularProgress","color","style","getTable","TableContainer","component","Paper","Table","className","aria-label","width","TableHead","TableBody","apiURL","Bus","tripId","stopId","stateUpdateCallback","this","trip","isLoading","stopsDictionary","getTripPromise","then","locTrip","getRoutePromise","route_id","bind","locRoute","route_long_name","route_short_name","substring","getStopPromise","locStop","stop_name","fetch","res","json","routeId","tripUpdateId","uqStops","BusDisplay","setBuses","loadingBuses","setLoadingBuses","setIsLoading","getBuses","splice","indexOf","stops","toString","getUqStopsString","today_brisbane","brisbane_today","Date","toLocaleString","timezone","getBrisbaneTime","date","getFullYear","getMonth","padStart","getDate","dateToString","getHours","getMinutes","getSeconds","timeToString","stopTimes","forEach","busJSON","name","stop_id","trip_id","departure_time","ReactDOM","render","class","Grid","container","direction","alignItems","justify","item","src","process","alt","document","getElementById"],"mappings":"2TAWA,SAASA,EAAaC,GAGpB,IAFA,IAAIC,EAAQ,GAEHC,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAAK,CACtC,IAAIE,EAAUJ,EAASE,GACnBG,EAAM,CAACC,GAAGF,EAAQG,eAAgBC,MAAMJ,EAAQK,cAChDC,KAAKN,EAAQO,SAAUC,KAAKR,EAAQQ,MACxCX,EAAMY,KAAKR,GAGf,OAAOJ,EA+GMa,MA5Ff,SAAyBC,GAAQ,IAAD,EACNC,mBAASjB,EAAagB,EAAMd,QADtB,mBACvBgB,EADuB,KACjBC,EADiB,OAEQF,mBAASjB,EAAagB,EAAMd,QAFpC,mBAEVkB,GAFU,aAGAH,mBAASD,EAAMK,SAHf,mBAGvBA,EAHuB,KAGdC,EAHc,KAIxBC,EAnBCC,aAAW,SAAAC,GAAK,MAAK,CACpBC,MAAO,CACLC,SAAU,KAGZN,QAAS,CACPO,QAAS,OACT,YAAa,CACXC,UAAWJ,EAAMK,QAAQ,IAE3BC,aAAc,YAWxBC,qBAAU,WACRb,EAAQnB,EAAagB,EAAMd,QAC3BkB,EAAeF,GACfI,EAAWN,EAAMK,WAChB,CAACL,EAAMd,MAAOc,EAAMK,UAEvB,IAAMY,EAAe,SAACC,EAAGC,GACvB,IAAIC,EAAeC,SAASH,EAAErB,KAAKyB,MAAM,KAAK,IAAMD,SAASF,EAAEtB,KAAKyB,MAAM,KAAK,IAC3EC,EAAiBF,SAASH,EAAErB,KAAKyB,MAAM,KAAK,IAAMD,SAASF,EAAEtB,KAAKyB,MAAM,KAAK,IAEjF,OAAIF,EAAe,EACV,EACEA,EAAe,GAChB,EAEJG,EAAiB,EACZ,EACEA,EAAiB,GAClB,EAED,GAKPC,EAAUC,uBAAY,WAC1B,IACIC,EADUxB,EAAKyB,KAAKV,GACHW,KAAI,SAAAtC,GACvB,OAAO,kBAACuC,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,CAAWC,MAAQ,SAASzC,EAAIC,IAChC,kBAACuC,EAAA,EAAD,KAAYxC,EAAIG,OAChB,kBAACqC,EAAA,EAAD,CAAWC,MAAQ,UAAUzC,EAAIK,MACjC,kBAACmC,EAAA,EAAD,KAAYxC,EAAIO,UAI5B,OADAmC,QAAQC,IAAIP,GACLA,IACN,CAACxB,IAEEgC,EAAmBT,uBAAY,WACnC,OACE,yBAAKM,MAAQ,UACI,YAAZ1B,EACC,6BACE,6BACA,kBAAC8B,EAAA,EAAD,CAAkBC,MAAM,UAAUC,MAAO,CAACD,MAAM,WAE/C,kCAKPE,EAAWb,uBAAY,WAC3B,OACE,kBAACc,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CAAOC,UAAWpC,EAAQG,MAAOkC,aAAW,gBAC1C,kCACE,yBAAKP,MAAS,CAACQ,MAAQ,QACvB,yBAAKR,MAAS,CAACQ,MAAQ,SACvB,yBAAKR,MAAS,CAACQ,MAAQ,QACvB,yBAAKR,MAAS,CAACQ,MAAQ,UAEzB,kBAACC,EAAA,EAAD,KACE,kBAACjB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,SACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,QACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,UAGJ,kBAACgB,EAAA,EAAD,KACGvB,SAKR,CAACjB,IAEJ,OACE,6BACG+B,IACAJ,M,gBC/HDc,EAAS,4CAmFEC,E,WAhFb,WAAYC,EAAQC,EAAQtD,EAAMuD,GAAsB,oBAEtDC,KAAKH,OAASA,EACdG,KAAKF,OAASA,EAEdE,KAAKxD,KAAO,cACZwD,KAAKC,KAAO,cAEZD,KAAK5D,MAAQ,eACb4D,KAAK3D,cAAgB,eACrB2D,KAAK7D,eAAiB,MAEtB6D,KAAK1D,KAAO,eACZ0D,KAAKzD,SAAW,MAEhByD,KAAKE,WAAY,EAEjB,IAAMC,EAAkB,CAAC,uBAAwB,IACvB,uBAAwB,IACxB,uBAAwB,IACxB,uBAAwB,IACxB,uBAAwB,IACxB,mBAAoB,OAE3BH,KAAKI,eAAeJ,KAAKH,QAAQQ,KAAK,SAASC,GAGhE,OAFAN,KAAKC,KAAOK,EAAQ,GAEbN,KAAKO,gBAAgBD,EAAQ,GAAGE,WACvCC,KAAKT,OAEwBK,KAAK,SAASK,GAC3CV,KAAK5D,MAAQsE,EACbV,KAAK3D,cAAgBqE,EAAS,GAAGC,gBACjCX,KAAK7D,eAAiBuE,EAAS,GAAGE,kBAClCH,KAAKT,OAEuBK,KAAK,WAIjC,OAHAL,KAAKxD,KAAOA,EACZwD,KAAKxD,KAAOwD,KAAKxD,KAAKqE,UAAU,EAAG,GAE5Bb,KAAKc,eAAehB,IAC3BW,KAAKT,OAE+BK,KAAK,SAASU,GAClDf,KAAK1D,KAAOyE,EACZf,KAAKzD,SAAW4D,EAAgBY,EAAQ,GAAGC,YAC3CP,KAAKT,OAEaK,KAAK,WACvBL,KAAKE,WAAY,EACjBH,EAAoBC,OACpBS,KAAKT,O,2DAGMH,GACb,OAAOoB,MAAMtB,EAAS,iBAAmBE,EAAS,KAC7CQ,MAAK,SAAAa,GAAG,OAAIA,EAAIC,Y,sCAGPC,GACd,OAAOH,MAAMtB,EAAS,mBAAqByB,EAAU,KAChDf,MAAK,SAAAa,GAAG,OAAIA,EAAIC,Y,qCAGRrB,GACb,OAAOmB,MAAMtB,EAAS,iBAAmBG,EAAS,KAC7CO,MAAK,SAAAa,GAAG,OAAIA,EAAIC,Y,2CAGFtB,GACnB,OAAOoB,MAAMtB,EAAS,wBAA0BE,EAAS,KACpDQ,MAAK,SAAAa,GAAG,OAAIA,EAAIC,Y,wCAGLE,GAChB,OAAOJ,MAAMtB,EAAS,oCAAsC0B,EAAe,KACtEhB,MAAK,SAAAa,GAAG,OAAIA,EAAIC,c,KCzErBG,EAAU,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAqF1CC,MAtDf,SAAoB5E,GAAQ,IAAD,EACGC,mBAAS,IADZ,mBAChBf,EADgB,KACT2F,EADS,OAEiB5E,mBAAS,IAF1B,mBAEhB6E,EAFgB,KAEFC,EAFE,OAGW9E,mBAAS,WAHpB,mBAGhBsD,EAHgB,KAGLyB,EAHK,KAKvBhE,qBAAU,WACNiE,MACD,IAEH,IAAM7B,EAAsB3B,uBAAY,SAACnC,GACrC0C,QAAQC,IAAI,qBAAsB3C,GAGlCyF,GAAgB,SAACD,GAAD,OAAkBA,EAAaI,OAAOJ,EAAaK,QAAQ7F,OAChD,GAAvBwF,EAAa1F,OACb4F,EAAa,QAEbA,EAAa,WAGjBH,GAAS,SAAA3F,GAAK,4BAAQA,GAAR,CAAeI,UAG3B2F,EAAWxD,uBAAY,WACzB,IAAI2D,EAlCZ,WAEI,IADA,IAAIA,EAAQ,GACHjG,EAAI,EAAGA,EAAIwF,EAAQvF,OAAQD,IAChCiG,EAAQjG,IAAMwF,EAAQvF,OAAS,EAAIgG,EAAMC,WAAaV,EAAQxF,GAAGkG,WACzDD,EAAMC,WAAaV,EAAQxF,GAAGkG,WAAa,IAGvD,OAAOD,EA2BSE,GAERC,EAtDZ,WACI,IACIC,GADQ,IAAIC,MACWC,eAAe,QAAS,CAACC,SAAU,uBAC9D,OAAO,IAAIF,KAAKD,GAmDSI,GACjBC,EAjDZ,SAAsBA,GAClB,OAAOA,EAAKC,cAAgB,KACjBD,EAAKE,WAAa,GAAGV,WAAWW,SAAS,EAAG,KAAO,IACpDH,EAAKI,UAAUZ,WAAWW,SAAS,EAAG,KA8CjCE,CAAaX,GACpB1F,EA5CZ,SAAsBgG,GAClB,OAAOA,EAAKM,WAAWd,WAAWW,SAAS,EAAG,KACxC,IAAMH,EAAKO,aAAaf,WAAWW,SAAS,EAAG,KAC/C,IAAMH,EAAKQ,aAAahB,WAAWW,SAAS,EAAG,KAyCtCM,CAAaf,GAGNjB,MAAMtB,4DAA8B6C,EAAO,IAAMhG,EAC3D,YAAcuF,GAAO1B,MAAK,SAAAa,GAAS,OAAOA,EAAIC,UAE1Cd,MAAK,SAAA6C,GACbA,EAAUC,SAAQ,SAAAC,GACd,GAAoB,cAAfzG,EAAM0G,MAA4C,SAApBD,EAAQE,SACnB,aAAf3G,EAAM0G,MAA2C,SAApBD,EAAQE,QAAqB,CAC/D,IAAMrH,EAAM,IAAI2D,EAAIwD,EAAQG,QAASH,EAAQE,QAASF,EAAQI,eAAgBzD,GAC9E2B,GAAgB,SAAAD,GAAY,4BAAQA,GAAR,CAAsBxF,iBAMlE,OACI,yBAAKqD,UAAU,YACX,4BAAK3C,EAAM0G,MACX,kBAAC,EAAD,CAAiBrG,QAAWkD,EAAWrE,MAASA,MClD5D4H,IAASC,OACP,mBA7BF,WACI,OACE,6BACE,yBAAKC,MAAM,SACT,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACpG,QAAS,EAAGqG,UAAU,MAAMC,WAAW,SAASC,QAAQ,UACtE,kBAACJ,EAAA,EAAD,CAAMK,MAAI,GACR,yBAAKvF,MAAM,QAAQwF,IAAKC,6BAA4CC,IAAI,MAE1E,kBAACR,EAAA,EAAD,CAAMK,MAAI,GACR,wBAAIvF,MAAQ,QAAZ,YAIR,yBAAKiF,MAAM,mBACP,wBAAIjF,MAAQ,UAAZ,YACA,kBAACkF,EAAA,EAAD,CAAMC,WAAS,EAACpG,QAAS,EAAGqG,UAAU,SAASC,WAAW,SAASC,QAAQ,UACzE,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACjF,MAAS,CAAC1B,SAAU,IAAKkC,MAAO,QACzC,kBAAC,EAAD,CAAY6D,KAAO,eAErB,kBAACO,EAAA,EAAD,CAAMK,MAAI,EAACjF,MAAS,CAAC1B,SAAU,IAAKkC,MAAO,QACzC,kBAAC,EAAD,CAAY6D,KAAO,mBAS/B,MACAgB,SAASC,eAAe,W","file":"static/js/main.f1bd2d78.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction convertBuses(busProps) {\r\n  var buses = [];\r\n\r\n  for (var i = 0; i < busProps.length; i++) {\r\n      var busProp = busProps[i];\r\n      var bus = {no:busProp.routeShortName, route:busProp.routeLongName,\r\n          stop:busProp.stopName, time:busProp.time};\r\n      buses.push(bus);\r\n  }\r\n\r\n  return buses;\r\n}\r\n\r\nfunction useStyles() {\r\n  return makeStyles(theme => ({\r\n          table: {\r\n            minWidth: 500,\r\n          },\r\n\r\n          loading: {\r\n            display: 'flex',\r\n            '& > * + *': {\r\n              marginTop: theme.spacing(2),\r\n            },\r\n            colorPrimary: \"#fff\"\r\n          },\r\n        }));\r\n}\r\n\r\nfunction BusDisplayTable(props) {\r\n  const [rows, setRows] = useState(convertBuses(props.buses));\r\n  const [initialRows, setInitialRows] = useState(convertBuses(props.buses));\r\n  const [loading, setLoading] = useState(props.loading);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setRows(convertBuses(props.buses));\r\n    setInitialRows(rows);\r\n    setLoading(props.loading);\r\n  }, [props.buses, props.loading])\r\n\r\n  const busRowSorter = (a, b) => {\r\n    var compareHours = parseInt(a.time.split(\":\")[0]) - parseInt(b.time.split(\":\")[0])\r\n    var compareMinutes = parseInt(a.time.split(\":\")[1]) - parseInt(b.time.split(\":\")[1])\r\n\r\n    if (compareHours > 0) {\r\n      return 1\r\n    } else if (compareHours < 0) {\r\n      return -1\r\n    } else {\r\n      if (compareMinutes > 0) {\r\n        return 1\r\n      } else if (compareMinutes < 0) {\r\n        return -1\r\n      } else {\r\n        return 0\r\n      }\r\n    }\r\n  }\r\n\r\n  const getRows = useCallback(() => {\r\n    var busList = rows.sort(busRowSorter)\r\n    var busMap = busList.map(bus => {\r\n      return <TableRow>\r\n                <TableCell align = \"right\">{bus.no}</TableCell>\r\n                <TableCell>{bus.route}</TableCell>\r\n                <TableCell align = \"center\">{bus.stop}</TableCell>\r\n                <TableCell>{bus.time}</TableCell>\r\n              </TableRow>\r\n    })\r\n    console.log(busMap)\r\n    return busMap\r\n  }, [rows]);\r\n\r\n  const getLoadingCircle = useCallback(() => {\r\n    return (\r\n      <div align = \"center\">\r\n          {loading === 'loading' ? (\r\n            <div>\r\n              <br></br>\r\n              <CircularProgress color=\"primary\" style={{color:\"#fff\"}}/>\r\n            </div>\r\n          ) : (<div></div>)}\r\n        </div>\r\n    );\r\n  });\r\n\r\n  const getTable = useCallback(() => {\r\n    return (\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"simple table\">\r\n          <colgroup>\r\n            <col style = {{width : '2%'}}/>\r\n            <col style = {{width : '83%'}}/>\r\n            <col style = {{width : '5%'}}/>\r\n            <col style = {{width : '10%'}}/>\r\n          </colgroup>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell></TableCell>\r\n              <TableCell align=\"left\">Route</TableCell>\r\n              <TableCell align=\"left\">Stop</TableCell>\r\n              <TableCell align=\"left\">Time</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {getRows()}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n  }, [classes]);\r\n\r\n  return (\r\n    <div>\r\n      {getTable()}\r\n      {getLoadingCircle()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BusDisplayTable;","const apiURL = \"https://uq-bus-backend-api.herokuapp.com/\"\r\n\r\nclass Bus {\r\n    constructor(tripId, stopId, time, stateUpdateCallback) {\r\n  \r\n      this.tripId = tripId;\r\n      this.stopId = stopId;\r\n  \r\n      this.time = \"Loading... \";\r\n      this.trip = \"Loading... \";\r\n  \r\n      this.route = \"Loading...  \";\r\n      this.routeLongName = \"Loading...  \";\r\n      this.routeShortName = \"...\";\r\n  \r\n      this.stop = \"Loading...  \";\r\n      this.stopName = \"...\";\r\n\r\n      this.isLoading = true;\r\n\r\n      const stopsDictionary = {\"UQ Lakes, platform A\": \"A\",\r\n                                \"UQ Lakes, platform B\": \"B\",\r\n                                \"UQ Lakes, platform C\": \"C\",\r\n                                \"UQ Lakes, platform D\": \"D\",\r\n                                \"UQ Lakes, platform E\": \"E\",\r\n                                \"UQ Lakes station\": \"Any\"};\r\n  \r\n      var routePromise = this.getTripPromise(this.tripId).then(function(locTrip) {\r\n        this.trip = locTrip[0];\r\n\r\n        return this.getRoutePromise(locTrip[0].route_id);\r\n      }.bind(this));\r\n  \r\n      var timePromise = routePromise.then(function(locRoute) {\r\n        this.route = locRoute;\r\n        this.routeLongName = locRoute[0].route_long_name;\r\n        this.routeShortName = locRoute[0].route_short_name;\r\n      }.bind(this));\r\n  \r\n      var stopPromise = timePromise.then(function() {\r\n        this.time = time;\r\n        this.time = this.time.substring(0, 5);\r\n\r\n        return this.getStopPromise(stopId)\r\n      }.bind(this));\r\n  \r\n      var loadCompletePromise = stopPromise.then(function(locStop) {\r\n        this.stop = locStop;\r\n        this.stopName = stopsDictionary[locStop[0].stop_name];\r\n      }.bind(this));\r\n  \r\n      loadCompletePromise.then(function() {\r\n        this.isLoading = false;\r\n        stateUpdateCallback(this);\r\n      }.bind(this));\r\n    }\r\n  \r\n    getTripPromise(tripId) {\r\n      return fetch(apiURL + \"/trip/trip_id/\" + tripId + \"/\")\r\n          .then(res => res.json());\r\n    }\r\n  \r\n    getRoutePromise(routeId) {\r\n      return fetch(apiURL + \"/route/route_id/\" + routeId + \"/\")\r\n          .then(res => res.json());\r\n    }\r\n  \r\n    getStopPromise(stopId) {\r\n      return fetch(apiURL + \"/stop/stop_id/\" + stopId + \"/\")\r\n          .then(res => res.json());\r\n    }\r\n  \r\n    getTripUpdatePromise(tripId) {\r\n      return fetch(apiURL + \"/trip_update/trip_id/\" + tripId + \"/\")\r\n          .then(res => res.json());\r\n    }\r\n  \r\n    getStopTimeUpdate(tripUpdateId) {\r\n      return fetch(apiURL + \"/stop_time_update/trip_update_id/\" + tripUpdateId + \"/\")\r\n          .then(res => res.json());\r\n    }\r\n  }\r\n\r\n  export default Bus;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport './index.css';\r\n\r\nimport BusDisplayTable from './busDisplayTable.js';\r\nimport Bus from './bus.js';\r\n\r\nconst uqStops = [\"1853\", \"1877\", \"1878\", \"1880\", \"1883\", \"1882\"];\r\nconst apiURL = \"https://uq-bus-backend-api.herokuapp.com/\" //http://uqbus.richal.tech/\r\n\r\nfunction getBrisbaneTime() {\r\n    var today = new Date();\r\n    var brisbane_today = today.toLocaleString('en-US', {timezone: \"Australia/Brisbane\"})\r\n    return new Date(brisbane_today);\r\n}\r\n\r\nfunction dateToString(date) {\r\n    return date.getFullYear() + '-' \r\n            + (date.getMonth() + 1).toString().padStart(2, \"0\") + '-' \r\n            + date.getDate().toString().padStart(2, \"0\");\r\n}\r\n\r\nfunction timeToString(date) {\r\n    return date.getHours().toString().padStart(2, \"0\") \r\n        + ':' + date.getMinutes().toString().padStart(2, \"0\") \r\n        + ':' + date.getSeconds().toString().padStart(2, \"0\");\r\n}\r\n\r\nfunction getUqStopsString() {\r\n    var stops = \"\";\r\n    for (var i = 0; i < uqStops.length; i++) {\r\n        stops = i === uqStops.length - 1 ? stops.toString() + uqStops[i].toString() : \r\n                stops.toString() + uqStops[i].toString() + \",\"; \r\n    }\r\n\r\n    return stops;\r\n}\r\n\r\nfunction BusDisplay(props) {\r\n    const [buses, setBuses] = useState([])\r\n    const [loadingBuses, setLoadingBuses] = useState([])\r\n    const [isLoading, setIsLoading] = useState(\"loading\")\r\n\r\n    useEffect(() => {\r\n        getBuses();\r\n    }, []);\r\n\r\n    const stateUpdateCallback = useCallback((bus) => {\r\n        console.log(\"Finished Loading: \", bus);\r\n        \r\n        // Remove bus that just finished loading and check if there are any others remaining\r\n        setLoadingBuses((loadingBuses) => loadingBuses.splice(loadingBuses.indexOf(bus)));\r\n        if (loadingBuses.length == 0) {\r\n            setIsLoading(\"done\");\r\n        } else {\r\n            setIsLoading(\"loading\");\r\n        }\r\n\r\n        setBuses(buses => [...buses, bus]);\r\n    });\r\n\r\n    const getBuses = useCallback(() => {\r\n        var stops = getUqStopsString();\r\n\r\n        var today_brisbane = getBrisbaneTime();\r\n        var date = dateToString(today_brisbane);\r\n        var time = timeToString(today_brisbane);        \r\n        \r\n        // Load all of the scheduled buses at this time and for some time afterwards\r\n        var busPromises = fetch(apiURL + \"/stop_time?time=\" + date + \" \" + time + \r\n                \"&stop_id=\" + stops).then(res => { return res.json(); });\r\n\r\n        busPromises.then(stopTimes => {\r\n            stopTimes.forEach(busJSON => {\r\n                if ((props.name === \"Departing\" && busJSON.stop_id !== \"1882\") ||\r\n                        (props.name === \"Arriving\" && busJSON.stop_id === \"1882\")) {\r\n                    const bus = new Bus(busJSON.trip_id, busJSON.stop_id, busJSON.departure_time, stateUpdateCallback);\r\n                    setLoadingBuses(loadingBuses => [...loadingBuses, bus]);\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    return (\r\n        <div className=\"BusTable\">\r\n            <h3>{props.name}</h3>\r\n            <BusDisplayTable loading = {isLoading} buses = {buses}/>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BusDisplay;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './index.css';\r\n\r\nimport BusDisplay from './busDisplay.js';\r\n\r\nfunction App() {\r\n    return (\r\n      <div>\r\n        <div class=\"title\">\r\n          <Grid container spacing={0} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n            <Grid item>\r\n              <img align=\"right\" src={process.env.PUBLIC_URL + '/busWhite96.png'} alt=\"\"/>\r\n            </Grid>\r\n            <Grid item>\r\n              <h1 align = \"left\">UQBus</h1>\r\n            </Grid>\r\n          </Grid>\r\n      </div>\r\n      <div class=\"uq-lakes-tables\">\r\n          <h2 align = \"center\">UQ Lakes</h2>\r\n          <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n            <Grid item style = {{minWidth: 345, width: \"60%\"}}>\r\n              <BusDisplay name = \"Departing\"></BusDisplay>\r\n            </Grid>\r\n            <Grid item style = {{minWidth: 345, width: \"60%\"}}>\r\n              <BusDisplay name = \"Arriving\"></BusDisplay>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nReactDOM.render(\r\n  <App></App>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}